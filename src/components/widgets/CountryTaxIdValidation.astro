---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Headline from '~/components/ui/Headline.astro';

const {
  title = '',
  subtitle = '',
  tagline = '',
  id,
  isDark = false,
  classes = {},
  bg = '',
  country = 'IN', // default to India
  taxIdPlaceholder = '',
  sampleTaxIds = [],
  validateLabel = 'Submit',
  loadRandomLabel = 'Load Random Tax ID',
} = Astro.props;
---

<tax-id-country-validation>
<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

  <div class="flex flex-col max-w-xl mx-auto rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 shadow p-4 sm:p-6 lg:p-8 w-full">
    <div id="taxIdForm" class="grid sm:grid-cols-12 gap-4 py-4">
      <input type="hidden" id="countryCode" name="countryCode" value={country} />
      <div class="sm:col-span-12">
        <label for="targetTaxID" class="block text-sm font-medium">
          Tax ID Number:
        </label>
        <input
          type="text"
          id="targetTaxID"
          name="targetTaxID"
          class="px-4 py-3 w-full bg-neutral-50 dark:bg-neutral-700 outline-none rounded-md border border-neutral-200 dark:border-neutral-600"
          placeholder={taxIdPlaceholder || `Enter Tax ID for ${country}`}
        />
      </div>
      <div class="sm:col-span-12">
        <div class="flex justify-center gap-4">
          <button type="button" id="submitButton" class="btn btn-primary submitButton">
            {validateLabel}
          </button>
        </div>
      </div>
    </div>
    <div id="responseContainer" class="mt-4 hidden">
      <!-- Response will be inserted here -->
    </div>
  </div>
</WidgetWrapper>
</tax-id-country-validation>
<script>
  class TaxIdCountryValidation extends HTMLElement {
    constructor() {
      super();
      this.validationCount = parseInt(localStorage.getItem('taxIdValidationCount') || '0');
      this.maxValidations = 10;
      this.sampleTaxIds = this.getAttribute('sampleTaxIds') ? JSON.parse(this.getAttribute('sampleTaxIds')) : [];
    }
    connectedCallback() {
      const submitButton = this.querySelector('#submitButton');
      const loadRandomButton = this.querySelector('#loadRandomButton');
      const responseContainer = this.querySelector('#responseContainer');
      const countryCode = this.getAttribute('country') || 'IN';
      const targetTaxIDInput = this.querySelector('#targetTaxID');
      const taxIdPlaceholder = this.getAttribute('taxIdPlaceholder');
      if (taxIdPlaceholder && targetTaxIDInput) {
        targetTaxIDInput.placeholder = taxIdPlaceholder;
      }
      if (submitButton && responseContainer) {
        submitButton.addEventListener('click', async () => {
          // Validation count logic
          if (!this.validationCount) this.validationCount = parseInt(localStorage.getItem('taxIdValidationCount') || '0');
          if (!this.maxValidations) this.maxValidations = 10;
          if (this.validationCount >= this.maxValidations) {
            alert(`You have reached the maximum of ${this.maxValidations} validations.`);
            return;
          }
          if (!targetTaxIDInput) return;
          let targetTaxID = targetTaxIDInput.value.trim();
          if (!targetTaxID || targetTaxID.length < 4) {
            displayError('Invalid tax ID number. Please enter a valid tax ID Number.');
            return;
          }
          // Remove country prefix if present
          const regex = /^[a-zA-Z]{2,3}/;
          const result = targetTaxID.match(regex);
          if (result) {
            const prefix_length = result[0].length;
            targetTaxID = targetTaxID.substr(prefix_length);
          }
          try {
            const baseUrl = 'https://demo.lookuptax.com';
            // Special handling for Switzerland
            let cc = countryCode;
            if (cc === 'CH') {
              targetTaxID = `CHE${targetTaxID}`;
            }
            const response = await fetch(`${baseUrl}/validate?country_iso=${cc}&tin=${targetTaxID}`, {
              method: 'GET',
              headers: { 'Content-Type': 'application/json' },
            });
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            // Increment validation count and save to localStorage
            this.validationCount++;
            localStorage.setItem('taxIdValidationCount', this.validationCount.toString());
            displayResponse(data);
          } catch (error) {
            let errorMessage = 'Not found. ';
            if (error instanceof TypeError && error.message === 'Failed to fetch') {
              errorMessage += 'The Tax id could not be found. Please ensure that the ID submitted is without any special characters and the country prefix.';
            } else {
              errorMessage += error.message;
            }
            displayError(errorMessage);
          }
        });

      // Helper functions for displaying response/errors
      function displayResponse(data) {
        responseContainer.innerHTML = '';
        responseContainer.classList.remove('hidden');
        if (data.error || data.message || (data.errors && data.errors.length > 0)) {
          const errorMessage = data.error || data.message || data.errors.map(err => `${err.code}: ${err.message}`).join('<br>');
          responseContainer.innerHTML = `<div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert"><p class="font-bold">Error</p><p>${errorMessage}</p></div>`;
          return;
        }
        if (data.validation?.format?.error) {
          const formatError = data.validation.format.error;
          responseContainer.innerHTML = `<div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert"><p class="font-bold">Format Validation Error</p><p><strong>${formatError.code}:</strong> ${formatError.message}</p></div>`;
          return;
        }
        const isValid = data.validation?.overall?.isValid;
        const formatValid = data.validation?.format?.isValid;
        const sourceValid = data.validation?.source?.isValid;
        const sourceAttempted = data.validation?.source?.attempted;
        if (isValid) {
          let statusClass = 'bg-green-100 border-green-500 text-green-700';
          let statusTitle = 'Valid Tax ID Number';
          if (formatValid && !sourceAttempted) {
            statusClass = 'bg-yellow-100 border-yellow-500 text-yellow-700';
            statusTitle = 'Format Valid, Source Not Checked';
          }
          responseContainer.innerHTML = `<div class="${statusClass} border-l-4 p-4" role="alert"><p class="font-bold">${statusTitle}</p><p>Tax ID is valid.</p></div>`;
        } else {
          responseContainer.innerHTML = `<div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert"><p class="font-bold">Invalid Tax ID</p><p>The provided Tax ID is not valid.</p></div>`;
        }
      }
      function displayError(errorMessage) {
        responseContainer.innerHTML = `<div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert"><p class="font-bold">Error</p><p>${errorMessage}</p></div>`;
        responseContainer.classList.remove('hidden');
      }
      }
    }
  }
  customElements.define('tax-id-country-validation', TaxIdCountryValidation);
</script>
